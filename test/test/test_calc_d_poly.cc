#include <iostream>
#include <cmath>
#define M 4
#define N 50
//selfdrive/controls/lib/lane_planner.py--calc_d_poly()

float interp(float x, float xp[], float fp[], int n)
{
    int hi = 0;

    while(hi < n && x > xp[hi]){
        hi += 1;
    }

    int low = hi -1;
    if(hi == n && x > xp[low]){
      return fp[n-1];
    }else if (hi == 0)
    {
      return fp[0];
    }else{
      return (x - xp[low]) * (fp[hi] - fp[low]) / (xp[hi] - xp[low]) + fp[low];
    }  
}

void model_polyfit(float points[N], float path_pinv[M][N], float ret[M])
{
    float sum;
    for(int i = 0; i < M; ++i){
        sum = 0.0;
        for(int j = 0; j < N; ++j){
            sum += path_pinv[i][j] * points[j];
        }
        ret[i] = sum;
    }
}

void calc_d_poly(float l_poly[], float r_poly[], float p_poly[], float l_prob, float r_prob, float lane_width, float d_poly[])
{
    float xp[2] = {2.0, 2.5};
    float fp[2] = {1.0, 0.0};
    float _lane_width_ = lane_width < 4.0 ? lane_width : 4.0;
    float _l_prob_ = l_prob * interp(fabs(l_poly[3]), xp, fp, 2);
    float _r_prob_ = r_prob * interp(fabs(r_poly[3]), xp, fp, 2);
    
    float lr_prob = _l_prob_ + _r_prob_ - _l_prob_ * _r_prob_;

    float path_from_left_lane = 0.0;
    float path_from_right_lane = 0.0;
    float d_poly_line = 0.0;

    for(int i = 0; i < 4; ++i){
        if(i == 3){
            path_from_left_lane = l_poly[i] - _lane_width_ / 2.0;
            path_from_right_lane = r_poly[i] + _lane_width_ / 2.0;
        }
        else{
            path_from_left_lane = l_poly[i];
            path_from_right_lane = r_poly[i];
        }

        std::cout << "_lane_width_: " << _lane_width_ << ", path_from_left_lane: " << path_from_left_lane << ", path_from_right_lane: " << path_from_right_lane << std::endl; 

        d_poly_line = (_l_prob_ * path_from_left_lane + _r_prob_ * path_from_right_lane) / (_l_prob_ + _r_prob_ + 0.001);
        d_poly[i] = lr_prob *  d_poly_line + (1.0 - lr_prob) * p_poly[i];
    }
}

int main(int argc, char *argv[])
{
    const float CAMERA_OFFSET = 0.06;
    float v_ego = 20;
    float path_pinv[4][50] = {{-1.99208856e-05, -1.50423014e-05, -1.06719030e-05, -6.78806556e-06, -3.36916411e-06, -3.93573728e-07,  2.16033052e-06,  4.31417356e-06,  6.08958032e-06,  7.50817574e-06,  8.59158474e-06,  9.36143225e-06,  9.83934320e-06,  1.00469425e-05,  1.00058552e-05,  9.73770603e-06,  9.26412006e-06,  8.60672219e-06,  7.78713734e-06,  6.82699044e-06, 5.74790643e-06,  4.57151023e-06,  3.31942677e-06,  2.01328099e-06, 6.74697820e-07, -6.74697820e-07, -2.01328099e-06, -3.31942677e-06,-4.57151023e-06, -5.74790643e-06, -6.82699044e-06, -7.78713734e-06,-8.60672219e-06, -9.26412006e-06, -9.73770603e-06, -1.00058552e-05,-1.00469425e-05, -9.83934320e-06, -9.36143225e-06, -8.59158474e-06,-7.50817574e-06, -6.08958032e-06, -4.31417356e-06, -2.16033052e-06, 3.93573728e-07,  3.36916411e-06,  6.78806556e-06,  1.06719030e-05, 1.50423014e-05,  1.99208856e-05}, {1.69042944e-03,  1.30415011e-03,  9.56376745e-04,  6.45519919e-04, 3.69990197e-04,  1.28198146e-04, -8.14456654e-05, -2.60530671e-04,-4.10646302e-04, -5.33381991e-04, -6.30327170e-04, -7.03071273e-04,-7.53203730e-04, -7.82313976e-04, -7.91991441e-04, -7.83825558e-04,-7.59405760e-04, -7.20321479e-04, -6.68162148e-04, -6.04517198e-04,-5.30976063e-04, -4.49128174e-04, -3.60562963e-04, -2.66869864e-04,-1.69638309e-04, -7.04577295e-05,  2.90824417e-05,  1.27392772e-04, 2.22883830e-04,  3.13966182e-04,  3.99050396e-04,  4.76547040e-04, 5.44866682e-04,  6.02419889e-04,  6.47617229e-04,  6.78869269e-04, 6.94586577e-04,  6.93179721e-04,  6.73059268e-04,  6.32635786e-04, 5.70319843e-04,  4.84522006e-04,  3.73652843e-04,  2.36122921e-04, 7.03428084e-05, -1.25276927e-04, -3.52325719e-04, -6.12392998e-04,-9.07068197e-04, -1.23794075e-03}, {-0.04184809, -0.03343724, -0.02580767, -0.01892854, -0.01276903, -0.00729828, -0.00248546,  0.00170028,  0.00528976,  0.00831384, 0.01080334,  0.01278911,  0.014302  ,  0.01537282,  0.01603244, 0.01631168,  0.01624139,  0.0158524 ,  0.01517556,  0.0142417 , 0.01308166,  0.01172628,  0.01020641,  0.00855287,  0.00679652, 0.00496819,  0.00309871,  0.00121893, -0.00064031, -0.00244817,-0.00417382, -0.00578642, -0.00725512, -0.00854908, -0.00963747,-0.01048945, -0.01107418, -0.01136082, -0.01131853, -0.01091646,-0.01012379, -0.00890967, -0.00724326, -0.00509373, -0.00243023, 0.00077808,  0.00456203,  0.00895246,  0.01398022,  0.01967614}, {0.27644156,  0.23626398,  0.19934773,  0.16557329,  0.13482114,  0.10697174,  0.08190558,  0.05950312,  0.03964484,  0.02221122,  0.00708273, -0.00586016, -0.01673696, -0.02566721, -0.03277043, -0.03816614, -0.04197388, -0.04431316, -0.04530351, -0.04506446, -0.04371553, -0.04137625, -0.03816614, -0.03420473, -0.02961154,-0.0245061 , -0.01900794, -0.01323657, -0.00731153, -0.00135234, 0.00452147,  0.01019039,  0.01553488,  0.02043541,  0.02477248, 0.02842653,  0.03127807,  0.03320755,  0.03409545,  0.03382225,  0.03226842,  0.02931444,  0.02484078,  0.01872791,  0.01085631,  0.00110646, -0.01064117, -0.0245061 , -0.04060787, -0.059066}};
    float leftLane_points[50] = {1.5761895, 1.574351, 1.5732352, 1.5744189, 1.573061, 1.5705775, 1.5694419, 1.569258, 1.5683932, 1.5667254, 1.5641075, 1.5629115, 1.5624135, 1.5615864, 1.5606759, 1.5605713, 1.5588325, 1.5576929, 1.555786, 1.5534463, 1.5528187, 1.5517489, 1.5509077, 1.5491813, 1.5485182, 1.546626, 1.5463024, 1.5436103, 1.54093, 1.5397468, 1.5380195, 1.5362276, 1.5343323, 1.5322795, 1.5312299, 1.529554, 1.5268264, 1.5261678, 1.5240464, 1.5228835, 1.5207725, 1.5199273, 1.5197134, 1.5178593, 1.5164641, 1.514294, 1.5133548, 1.5123382, 1.5103731, 1.5075383};
    float rightLane_points[50] = {-1.893837, -1.894454, -1.8966849, -1.8974499, -1.8997052, -1.900787, -1.9027631, -1.9037013, -1.9065424, -1.9074453, -1.9093661, -1.9096339, -1.9100418, -1.9111718, -1.9121888, -1.9136063, -1.9147706, -1.9156369, -1.9183264, -1.9199908, -1.9218354, -1.9238859, -1.9261016, -1.92621, -1.9274943, -1.9293803, -1.9307779, -1.9334117, -1.9356186, -1.9379534, -1.9396253, -1.9411077, -1.9430276, -1.9443495, -1.9440197, -1.9461031, -1.9482435, -1.9502844, -1.9523971, -1.954372, -1.9568144, -1.9574634, -1.9596272, -1.9618131, -1.9654566, -1.9675995, -1.9706581, -1.9724663, -1.9744929, -1.97766};
    float path_points[50] = {-0.0001957019, -3.450521e-05, -0.0006073183, -0.00054086425, -0.00086613634, -0.00087764795, -0.0019247084, -0.0017599487, -0.002080593, -0.0024175213, -0.002956423, -0.0034865367, -0.0040425276, -0.0041195555, -0.0047795735, -0.0050894446, -0.0053191474, -0.0058684302, -0.0063504456, -0.0062350063, -0.0063345688, -0.0066577434, -0.0076768505, -0.009072518, -0.00921346, -0.0097392909, -0.010966797, -0.012119547, -0.012941108, -0.013490796, -0.013896115, -0.01455108, -0.014949935, -0.016045352, -0.017069425, -0.017926946, -0.018709496, -0.020198151, -0.021183133, -0.022875967, -0.023689602, -0.024834651, -0.024924252, -0.026009329, -0.027828034, -0.02797343, -0.029647391, -0.032089163, -0.032914672, -0.035047546};
    
    float l_poly[4] = {0, 0, 0, 0};
    model_polyfit(leftLane_points, path_pinv, l_poly);  // left line
    float r_poly[4] = {0, 0, 0, 0};
    model_polyfit(rightLane_points, path_pinv, r_poly);  // right line
    float p_poly[4] = {0, 0, 0, 0};
    model_polyfit(path_points, path_pinv, p_poly);  // predicted path
    
    float l_prob = 0.9766466;  // left line prob
    float r_prob = 0.97837639;  // right line prob
    
    l_poly[3] += CAMERA_OFFSET;
    r_poly[3] += CAMERA_OFFSET;
    
    float lane_width_estimate = 3.7;
    float lane_width_certainty = 1.0;
    float lane_width = 3.7;

    // Find current lanewidth
    lane_width_certainty += 0.05 * (l_prob * r_prob - lane_width_certainty);
    float current_lane_width = fabs(l_poly[3] - r_poly[3]);
    lane_width_estimate += 0.005 * (current_lane_width - lane_width_estimate);
    float speed_range[2] = {0., 31.};
    float lanewidth_range[2] = {2.8, 3.5};
    float speed_lane_width = interp(v_ego, speed_range, lanewidth_range, 2);
    lane_width = lane_width_certainty * lane_width_estimate + (1 - lane_width_certainty) * speed_lane_width;
    std::cout << lane_width << std::endl;
    float d_poly[4] = {0, 0, 0, 0};
    calc_d_poly(l_poly, r_poly, p_poly, l_prob, r_prob, lane_width, d_poly);

    std::cout << d_poly[0] << ", "<< d_poly[1] << ", " << d_poly[2] <<  ", " << d_poly[3] << std::endl;
    return 0;
}
